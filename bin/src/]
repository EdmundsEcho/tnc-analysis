use color_eyre::eyre::Result;
use color_eyre::eyre::WrapErr;
use colored::*;
use polars::prelude::*;
use serde::Deserialize;
use std::fs::File;
use std::path::Path;

use tnc_analysis_lib::{
    app_cfg::AppConfig,
    matrix::Matrix,
    set_app_config,
    tnc_analysis_cfg::Config,
    // tnc_analysis_cfg::PropensityScore,
};

const FILENAME: &str = "/Users/edmund/Downloads/matrix.csv";
const APP_CFG: &str = "./res/app-cfg.json";
// const PROPENSITY_CFG: &str = "./res/propensity-cfg.json";

fn main() -> Result<()> {
    // let cfg: Config<PropensityScore> = read_cfg(PROPENSITY_CFG)?;
    let app_cfg: Config<AppConfig> = read_cfg(APP_CFG)?;
    set_app_config(app_cfg);

    let df = CsvReader::from_path(FILENAME)?
        .has_header(true)
        .finish()?
        .lazy()
        .collect()?;

    // print the first few lines
    let summary = df.describe(None)?;

    let mut matrix: Matrix = df.into();
    let missing = matrix.tag_null_records();

    println!("Missing: {}", missing.to_string().cyan());
    // let reach_field_name = header.get_fuzzy_field(&cfg.binary_event_field_tag);

    let null_count = &matrix.null_count().height();

    println!("{}", &summary);
    println!("{}", &matrix.head(Some(5)));
    // println!("{:?}", reach_field_name);
    println!("Null count: {}", &null_count);

    println!("{}", matrix.binary_target(None));
    println!("{}", matrix.predictors(None));

    matrix.write_to_file();

    Ok(())
}

fn read_cfg<T>(path: &str) -> Result<Config<T>>
where
    for<'de> T: Deserialize<'de>,
{
    let path = Path::new(path);
    let cfg: File = File::open(path).wrap_err_with(|| format!("Failed {}", path.display()))?;
    let cfg: T = serde_json::from_reader(cfg)
        .wrap_err_with(|| format!("Failed to parse: {}", path.display()))?;
    Ok(Config::new(cfg))
}

/*
    select(&[col("bool_col").sum()]

    let null_records = df
        .clone()
        .lazy()
        .filter(col("subject_idx").is_null())
        .collect()?;
    println!("{}", &null_records);

    // remove records with null values
    let non_null_df = df
        .clone()
        .lazy()
        .filter(col("subject_idx").is_not_null())
        .collect()?;
*/
